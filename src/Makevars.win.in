TARGET = $(subst 64,x86_64,$(subst 32,i686,$(WIN)))-pc-windows-gnu

TARGET_DIR = ./rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/@LIBDIR@
STATLIB = $(LIBDIR)/libtomledit.a
PKG_LIBS = -L$(LIBDIR) -ltomledit -lws2_32 -ladvapi32 -luserenv -lbcrypt -lntdll

all: $(SHLIB) rust_clean

$(SHLIB): $(STATLIB)

CARGOTMP = $(CURDIR)/.cargo
VENDOR_DIR = $(CURDIR)/vendor

$(STATLIB):
	mkdir -p $(TARGET_DIR)/libgcc_mock
	touch $(TARGET_DIR)/libgcc_mock/libgcc_eh.a

	# Check if NOT_CRAN is false and unzip vendor.tar.xz if so
	if [ "$(NOT_CRAN)" != "true" ]; then \
		if [ -f ./rust/vendor.tar.xz ]; then \
			tar xf rust/vendor.tar.xz && \
			mkdir -p $(CARGOTMP) && \
			cp rust/vendor-config.toml $(CARGOTMP)/config.toml; \
		fi; \
	fi

	export CARGO_HOME=$(CARGOTMP) && \
	export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$(CARGO_LINKER)" && \
	export LIBRARY_PATH="$${LIBRARY_PATH};$(CURDIR)/$(TARGET_DIR)/libgcc_mock" && \
	RUSTFLAGS="$(RUSTFLAGS) --print=native-static-libs" cargo build @CRAN_FLAGS@ --target=$(TARGET) --lib @PROFILE@ --manifest-path=./rust/Cargo.toml --target-dir $(TARGET_DIR)

	# Always clean up CARGOTMP
	rm -Rf $(CARGOTMP);

rust_clean:
	rm -Rf $(CARGOTMP) $(VENDOR_DIR) @CLEAN_TARGET@

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) $(TARGET_DIR)